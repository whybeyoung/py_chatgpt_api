# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from hack_chatgpt.generated.proto import chatgpt_pb2 as proto_dot_chatgpt__pb2


class ChatGptProxyServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitSession = channel.unary_unary(
                '/pb.ChatGptProxyServer/InitSession',
                request_serializer=proto_dot_chatgpt__pb2.InitSessionRequest.SerializeToString,
                response_deserializer=proto_dot_chatgpt__pb2.Message.FromString,
                )
        self.CreateConversation = channel.unary_unary(
                '/pb.ChatGptProxyServer/CreateConversation',
                request_serializer=proto_dot_chatgpt__pb2.Message.SerializeToString,
                response_deserializer=proto_dot_chatgpt__pb2.Message.FromString,
                )
        self.ServerStream = channel.stream_stream(
                '/pb.ChatGptProxyServer/ServerStream',
                request_serializer=proto_dot_chatgpt__pb2.Message.SerializeToString,
                response_deserializer=proto_dot_chatgpt__pb2.Message.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/pb.ChatGptProxyServer/SendMessage',
                request_serializer=proto_dot_chatgpt__pb2.Message.SerializeToString,
                response_deserializer=proto_dot_chatgpt__pb2.Message.FromString,
                )


class ChatGptProxyServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateConversation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatGptProxyServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitSession': grpc.unary_unary_rpc_method_handler(
                    servicer.InitSession,
                    request_deserializer=proto_dot_chatgpt__pb2.InitSessionRequest.FromString,
                    response_serializer=proto_dot_chatgpt__pb2.Message.SerializeToString,
            ),
            'CreateConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConversation,
                    request_deserializer=proto_dot_chatgpt__pb2.Message.FromString,
                    response_serializer=proto_dot_chatgpt__pb2.Message.SerializeToString,
            ),
            'ServerStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ServerStream,
                    request_deserializer=proto_dot_chatgpt__pb2.Message.FromString,
                    response_serializer=proto_dot_chatgpt__pb2.Message.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=proto_dot_chatgpt__pb2.Message.FromString,
                    response_serializer=proto_dot_chatgpt__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.ChatGptProxyServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatGptProxyServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.ChatGptProxyServer/InitSession',
            proto_dot_chatgpt__pb2.InitSessionRequest.SerializeToString,
            proto_dot_chatgpt__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.ChatGptProxyServer/CreateConversation',
            proto_dot_chatgpt__pb2.Message.SerializeToString,
            proto_dot_chatgpt__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/pb.ChatGptProxyServer/ServerStream',
            proto_dot_chatgpt__pb2.Message.SerializeToString,
            proto_dot_chatgpt__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.ChatGptProxyServer/SendMessage',
            proto_dot_chatgpt__pb2.Message.SerializeToString,
            proto_dot_chatgpt__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
