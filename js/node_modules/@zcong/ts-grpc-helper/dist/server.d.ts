import * as grpc from '@grpc/grpc-js';
import { Observable } from 'rxjs';
export declare const CANCEL_EVENT = "cancelled";
export declare type UnaryCallRequest<T extends grpc.handleUnaryCall<any, any>> = T extends grpc.handleUnaryCall<infer Req, any> ? Req : never;
export declare type UnaryCallResponse<T extends grpc.handleUnaryCall<any, any>> = T extends grpc.handleUnaryCall<any, infer Res> ? Res : never;
export declare type ServerStreamingCallRequest<T extends grpc.handleServerStreamingCall<any, any>> = T extends grpc.handleServerStreamingCall<infer Req, any> ? Req : never;
export declare type ServerStreamingCallResponse<T extends grpc.handleServerStreamingCall<any, any>> = T extends grpc.handleServerStreamingCall<any, infer Res> ? Res : never;
export declare type ClientStreamingCallRequest<T extends grpc.handleClientStreamingCall<any, any>> = T extends grpc.handleClientStreamingCall<infer Req, any> ? Req : never;
export declare type ClientStreamingCallResponse<T extends grpc.handleClientStreamingCall<any, any>> = T extends grpc.handleClientStreamingCall<any, infer Res> ? Res : never;
export declare type BidiStreamingCallRequest<T extends grpc.handleBidiStreamingCall<any, any>> = T extends grpc.handleBidiStreamingCall<infer Req, any> ? Req : never;
export declare type BidiStreamingCallResponse<T extends grpc.handleBidiStreamingCall<any, any>> = T extends grpc.handleBidiStreamingCall<any, infer Res> ? Res : never;
export declare const toHandleUnaryCall: <T extends grpc.handleUnaryCall<any, any>>(fn: (req: UnaryCallRequest<T>, metadata: grpc.Metadata, call: grpc.ServerUnaryCall<UnaryCallRequest<T>, UnaryCallResponse<T>>) => Promise<UnaryCallResponse<T>>) => T;
export declare const toHandleServerStreamingCall: <T extends grpc.handleServerStreamingCall<any, any>>(fn: (req: ServerStreamingCallRequest<T>, metadata: grpc.Metadata, call: grpc.ServerWritableStream<ServerStreamingCallRequest<T>, ServerStreamingCallResponse<T>>) => Promise<Observable<ServerStreamingCallResponse<T>>>) => T;
export declare const toHandleClientStreamingCall: <T extends grpc.handleClientStreamingCall<any, any>>(fn: (req: Observable<ClientStreamingCallRequest<T>>, metadata: grpc.Metadata, call: grpc.ServerReadableStream<ClientStreamingCallRequest<T>, ClientStreamingCallResponse<T>>) => Promise<ClientStreamingCallResponse<T>>) => T;
export declare const toHandleBidiStreamingCall: <T extends grpc.handleBidiStreamingCall<any, any>>(fn: (req: Observable<BidiStreamingCallRequest<T>>, metadata: grpc.Metadata, call: grpc.ServerDuplexStream<BidiStreamingCallRequest<T>, BidiStreamingCallResponse<T>>) => Promise<Observable<BidiStreamingCallResponse<T>>>) => T;
